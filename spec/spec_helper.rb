# frozen_string_literal: true

# This file was generated by rspec-rails
RSpec.configure do |config|
  # Run specs in random order
  config.order = :random
  Kernel.srand config.seed

  # Expectations
  config.expect_with :rspec do |expectations|
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # Mocks
  config.mock_with :rspec do |mocks|
    mocks.verify_partial_doubles = true
  end

  # Enable flags like --only-failures and --next-failure
  config.example_status_persistence_file_path = ".rspec_status"

  # Load mocks first
  Dir[File.expand_path("support/mocks/**/*.rb", __dir__)].each { |f| require f }

  # Load the clavis gem
  require "clavis"
  # require "simplecov"
  require "webmock/rspec"

  # Comment out SimpleCov for now to aid debugging
  # SimpleCov.start do
  #   add_filter "/spec/"
  # end

  # Disable external network connections during tests
  WebMock.disable_net_connect!(allow_localhost: true)

  # Load core support files (excluding special purpose files)
  Dir[File.expand_path("support/**/*.rb", __dir__)].each do |f|
    next if f.include?("mocks/") # Already loaded
    next if f.include?("generator_helpers.rb") # Will be loaded by type tag

    require f
  end

  # This allows you to limit a spec run to individual examples or groups
  # by tagging them with `:focus` metadata.
  config.filter_run_when_matching :focus

  # Disable RSpec exposing methods globally on `Module` and `main`
  config.disable_monkey_patching!

  # Print the 10 slowest examples and example groups
  config.profile_examples = 10 if ENV["PROFILE_SPECS"]

  # Verbose output
  config.verbose_retry = true if ENV["VERBOSE_RETRY"]

  # Define a minimal Rails class for specs that expect it but don't need the full framework
  unless defined?(Rails)
    class Rails
      def self.logger
        @logger ||= begin
          require "logger"
          Logger.new($stdout).tap { |l| l.level = Logger::INFO }
        end
      end

      def self.credentials
        {}
      end

      def self.env
        @env ||= "test"
      end

      def self.root
        Pathname.new(File.expand_path("../", __dir__))
      end
    end
  end

  # Tag tests that require Rails
  config.before(:each, type: :controller) do
    require "rails_helper" unless defined?(ActionController)
  end

  config.before(:each, type: :generator) do
    require "generator_spec/test_case" unless defined?(GeneratorSpec)
    require "support/generator_helpers" unless defined?(GeneratorHelpers)
  end

  # Ensure that dependencies are loaded in the correct order
  require "bundler/setup"
end
